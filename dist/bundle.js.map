{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/background.js","webpack:///./src/game.js","webpack:///./src/game_view.js","webpack:///./src/index.js","webpack:///./src/menu.js","webpack:///./src/obstacles.js","webpack:///./src/pause.js","webpack:///./src/sound.js","webpack:///./src/sprites/branch_sprite.js","webpack:///./src/sprites/squirrel_sprite.js","webpack:///./src/squirrel.js","webpack:///./src/treetrunks.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEe,yEAAU,E;;;;;;;;;;;;ACtBzB;AAAA;AAAA;AAAA;AAAA;AAAsC;AACD;AACG;AACC;;AAEzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,sDAAU;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,oDAAQ;AAC3B,0BAA0B,sDAAS;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,qDAAQ;AAClC;AACA,KAAK,4BAA4B,oDAAQ;AACzC;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qDAAQ;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA,0D;AACA,KAAK;;AAEL,mBAAmB,OAAO;AAC1B;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEe,mEAAI,E;;;;;;;;;;;;AC5HnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B;AACA;AACE;AACwB;AAC3B;;AAE5B;AACA;AACA;AACA,oBAAoB,gDAAI;AACxB;AACA;AACA;AACA;AACA,yBAAyB,gDAAI;AAC7B,yBAAyB,iDAAK;AAC9B;AACA;;AAEA,yBAAyB,8CAAK;AAC9B,yBAAyB,8CAAK;AAC9B,oBAAoB,8CAAK;AACzB,oBAAoB,8CAAK;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA;AACA,uBAAuB,gEAAc;AACrC;AACA;;AAEA,U;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,gDAAI;AACxB;AACA;AACA;AACA,KAAK;AACL,iDAAiD,mBAAmB;AACpE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mCAAmC,aAAa;AAChD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEe,uEAAQ,E;;;;;;;;;;;;AC3OvB;AAAA;AAAA;AAAA;AAAA;AAAqC;AACkB;AACJ;AACvB;;AAE5B,sBAAsB,8DAAY;AAClC,wBAAwB,gEAAc;AACtC,eAAe,8CAAK;;AAEpB;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAQ;AAC9B;AACA,CAAC,C;;;;;;;;;;;;AChBD;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEe,mEAAI,E;;;;;;;;;;;;ACxBnB;AAAA;AAAmD;;AAEnD;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,sBAAsB,8DAAY;AAClC;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,uEAAQ,E;;;;;;;;;;;;ACnEvB;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEe,oEAAK,E;;;;;;;;;;;;AC5CpB;AAAA;AACA;AACA;AACA;AACA;AACA,e;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEe,oEAAK,EAAC;AACrB,Q;;;;;;;;;;;;ACjCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,cAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,2EAAY,E;;;;;;;;;;;;ACvC3B;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,cAAc;;AAEzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,6EAAc,E;;;;;;;;;;;;AChD7B;AAAA;AAAuD;;AAEvD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gEAAc;AACpC;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,uEAAQ,E;;;;;;;;;;;;AC7JvB;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,wEAAS,E","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","class Background {\n  constructor() {\n    const background = document.getElementById(\"game-background\");\n    this.ctx = background.getContext('2d');\n    this.backgroundImage = document.getElementById('background-image');\n    this.imgHeight = 0;\n  }\n\n  draw() {\n    const scrollSpeed = 0.25;\n    this.ctx.clearRect(0, 0, 1280, 720);\n    this.ctx.drawImage(this.backgroundImage, 0, this.imgHeight, 1280, 720);\n    this.ctx.drawImage(this.backgroundImage, 0, this.imgHeight - 720, 1280, 720);\n    this.imgHeight += scrollSpeed;\n    if (this.imgHeight === 720) this.imgHeight = 0;\n  }\n\n  clear() {\n    this.ctx.clearRect(0, 0, 1280, 720);\n  }\n}\n\nexport default Background;","import Obstacle from './obstacles.js';\nimport Squirrel from './squirrel.js';\nimport Treetrunk from './treetrunks.js';\nimport Background from './background.js';\n\nclass Game {\n  constructor(ctx, paused) {\n    this.DIM_X = 1280;\n    this.DIM_Y = 720;\n    this.NUM_OBSTACLES = 30;\n    this.paused = paused;\n\n    this.liveObstacles = [false, false, false];\n    this.squirrels = [];\n    this.trees = [];\n    this.background = new Background();\n    this.obstacles = {\n      0: [],\n      1: [],\n      2: []\n    };\n    this.frameCount = 0;\n    this.currentLoopIndex = 0;\n    this.sqrlCtx = this.getSquirrelCanvas();\n    this.ctx = ctx;\n    for (let i = 0; i <= 2; i++) {\n      this.add(new Squirrel(i, this.sqrlCtx, paused));\n      this.trees.push(new Treetrunk(i));\n    };\n  }\n\n  getSquirrelCanvas() {\n    const squirrelCanvas = document.getElementById('game-squirrels')\n    const ctx = squirrelCanvas.getContext('2d');\n    return ctx;\n  }\n  \n  add(object) {\n    if (object instanceof Obstacle) {\n      this.obstacles[object.num].push(object);\n    } else if (object instanceof Squirrel) {\n      this.squirrels.push(object);\n    } else {\n      throw new Error('unknown object');\n    }\n  }\n  \n  addObstacle(num) {\n    const that = this;\n    let length = this.obstacles[num].length;\n    let minDistance = Math.floor((Math.random() * 200) + 200);\n    if (that.obstacles[num].length === 0 ||\n        (length < that.NUM_OBSTACLES/3 &&\n        that.obstacles[num][length - 1].pos[1] > minDistance)) {\n      that.add(new Obstacle(num, that.ctx));\n    }\n  }\n\n  draw(ctx) {\n    ctx.clearRect(0, 0, this.DIM_X, this.DIM_Y);\n    this.background.draw();\n    Object.keys(this.obstacles).forEach(num => {\n      this.obstacles[num].forEach(tree => tree.draw(ctx)); \n    });\n\n    for (let i = 0; i < 3; i++) {\n      if (this.squirrels[i].active) this.trees[i].draw();\n    }\n\n    this.frameCount++;\n    if (this.frameCount === 5) {\n      this.sqrlCtx.clearRect(0, 560, 1280, 720);\n      for (let i = 0; i < 3; i++) {\n        if (this.squirrels[i].active) {\n          this.squirrels[i].draw(ctx);\n        };\n      }\n      this.frameCount = 0;\n    }\n  }\n  \n  moveObjects() {\n    Object.keys(this.obstacles).forEach(num => {\n      this.obstacles[num].forEach(tree => tree.move());\n    })\n  }\n  \n  removeObjects() {\n    Object.keys(this.obstacles).forEach(num => {\n      let currentObstacles = [];\n      this.obstacles[num].forEach(tree => {\n        if (tree.pos[1] < 800) {\n          currentObstacles.push(tree);\n        }\n      })\n      this.obstacles[num] = currentObstacles;\n    })\n  }\n\n  detectCollision() {\n    let dead = false;\n    this.squirrels.forEach(squirrel => {\n      Object.keys(this.obstacles).forEach(num => {\n        this.obstacles[num].forEach(tree => {\n          if (this.beenHit(squirrel, tree)) {\n            dead = true;\n          }\n        })\n      })\n    })\n    return dead;\n  }\n\n  beenHit(squirrel, tree) {\n    if (squirrel.pos[0] < tree.pos[0] + tree.size[0] &&\n        squirrel.pos[0] + squirrel.size[0] > tree.pos[0] &&\n        squirrel.pos[1] < tree.pos[1] + tree.size[1] &&\n        squirrel.pos[1] + squirrel.size[1] > tree.pos[1]) {\n      return true;\n    }\n  }\n\n}\n\nexport default Game;","import Game from './game.js';\nimport Menu from './menu.js';\nimport Pause from './pause.js';\nimport SquirrelSprite from './sprites/squirrel_sprite';\nimport Sound from './sound';\n\nclass GameView {\n  constructor(ctx) {\n    this.paused = false;\n    this.game = new Game(ctx, this.paused);\n    this.ctx = ctx;\n    this.playing = false;\n    this.dead = false;\n    this.activeSquirrels = 0;\n    this.startMenu = new Menu(ctx);\n    this.pauseMenu = new Pause();\n    this.frames = 0;\n    this.muted = true;\n\n    this.gameMusic = new Sound(\"../assets/levelmusic.wav\");\n    this.menuMusic = new Sound(\"../assets/menu.wav\");\n    this.beep = new Sound(\"../assets/beep.wav\", \"sfx\");\n    this.boop = new Sound('../assets/dead.wav', \"sfx\");\n    this.muteButton = document.getElementById('mute-button');\n\n    this.muteButton.addEventListener('click', this.muteSound.bind(this));\n    this.bindKeyHandlers();\n  }\n\n  muteSound(e) {\n    const sounds = document.querySelectorAll('video, audio');\n    if (this.muted) {\n      this.muted = false;\n      e.target.innerHTML = 'mute sound';\n      this.beep.play();\n    } else {\n      this.muted = true;\n      e.target.innerHTML = 'unmute sound';\n    }\n    sounds.forEach(sound => sound.muted = this.muted);\n\n  }\n\n  drawSprite() {\n    const sprite = new SquirrelSprite(this.ctx);\n    sprite.draw();\n  }\n\n  menu() { \n    if (!this.playing) {\n      this.menuMusic.play();\n      this.startMenu.draw();\n      requestAnimationFrame(this.menu.bind(this));\n    }\n  }\n\n  start() {\n    this.menuMusic.stop();\n    this.gameMusic.restart();\n    this.gameMusic.play();\n    this.game.squirrels[0].active = true;\n    this.activeSquirrels++;\n    this.animate();\n  }\n\n  restart() {\n    this.clearScreen();\n    this.clearCache();\n    this.boop.stop();\n    this.menuMusic.restart();\n    this.menu();\n  }\n\n  clearScreen() {\n    this.ctx.clearRect(0, 0, this.game.DIM_X, this.game.DIM_Y);\n    this.pauseMenu.ctx.clearRect(0, 0, this.game.DIM_X, this.game.DIM_Y);\n    this.game.trees[0].ctx.clearRect(0, 0, this.game.DIM_X, this.game.DIM_Y);\n    this.game.background.clear();\n    this.game.sqrlCtx.clearRect(0, 560, this.game.DIM_X, this.game.DIM_Y);\n  }\n\n  clearCache() {\n    this.game = new Game(this.ctx);\n    this.game.background.clear();\n    this.game.squirrels.forEach(squirrel => {\n      squirrel.active = false;\n    })\n    this.game.liveObstacles.forEach(obstacle => { obstacle = false })\n    this.playing = false;\n    this.paused = false;\n    this.dead = false;\n    this.activeSquirrels = 0;\n    this.frames = 0;\n  }\n\n  gameOver() {\n    this.gameMusic.stop();\n    this.boop.play();\n    this.dead = true;\n    this.paused = true;\n    this.pauseMenu.gameOver();\n  }\n\n  animate() {\n    if (!this.paused && this.playing) {\n      if (this.game.detectCollision()) {\n        // alert('you died');\n        this.gameOver();\n      }\n\n      for (let i = 0; i <= 2; i++) {\n        if (this.game.squirrels[i].active && this.game.liveObstacles[i]) {\n          this.game.addObstacle(i);\n        }\n      }\n      this.game.moveObjects();\n      this.game.removeObjects();\n      this.game.draw(this.ctx);\n      this.drawScore();\n      if (this.frames <= 1900) this.checkActives();\n      this.frames++;\n      requestAnimationFrame(this.animate.bind(this));\n\n    }\n  }\n\n  checkActives() {\n    switch (this.frames) {\n      case 570:\n        this.game.squirrels[1].active = true;\n        this.activeSquirrels++;\n        break;\n      case 1720:\n        this.game.squirrels[2].active = true;\n        this.activeSquirrels++;\n        break;\n      case 150:\n        this.game.liveObstacles[0] = true;\n        break\n      case 720:\n        this.game.liveObstacles[1] = true;\n        break;\n      case 1870:\n        this.game.liveObstacles[2] = true;\n      default:\n        break;\n    }\n  }\n\n  drawScore() {\n    this.ctx.fillStyle = 'white';\n    this.ctx.textAlign = 'left';\n    const currentScore = Math.floor(this.frames / 60);\n    this.ctx.fillText(`distance: ${currentScore}`, 80, 40);\n  }\n\n  bindKeyHandlers() {\n    document.addEventListener('keypress', this.controlButtons.bind(this))\n  }\n\n  controlButtons(e) {\n    if (this.dead) {\n      switch (e.key) {\n        case \" \":\n          this.beep.playSFX();\n          this.restart();\n          break;\n        default:\n          break;\n      }\n    } else if (this.playing) {\n      switch (e.key) {\n        case \" \":\n          this.beep.playSFX();\n          if (this.paused) {\n            this.paused = false;\n            this.pauseMenu.ctx.clearRect(0, 0, 1280, 720);\n            this.animate();\n            this.gameMusic.play();\n          } else {\n            this.paused = true;\n            this.pauseMenu.draw(this.activeSquirrels);\n            this.gameMusic.stop();\n          }\n          break;\n     \n        case \"d\":\n          if (this.game.squirrels[0].active && !this.paused) {\n            this.game.squirrels[0].step(\"left\");\n          }\n          break;\n        case \"f\":\n          if (this.game.squirrels[0].active && !this.paused) {\n            this.game.squirrels[0].step(\"right\");\n          }\n          break;\n        case \"a\":\n          if (this.game.squirrels[1].active && !this.paused) {\n            this.game.squirrels[1].step(\"left\");\n          }\n          break;\n        case \"s\":\n          if (this.game.squirrels[1].active && !this.paused) {\n            this.game.squirrels[1].step(\"right\");\n          }\n          break;\n        case \"j\":\n          if (this.game.squirrels[2].active && !this.paused) {\n            this.game.squirrels[2].step(\"left\");\n          }\n          break;\n        case \"k\":\n          if (this.game.squirrels[2].active && !this.paused) {\n            this.game.squirrels[2].step(\"right\");\n          }\n          break;\n\n          default:\n            break;\n          }\n    } else {\n      switch (e.key) {\n        case \" \":\n          this.beep.playSFX();\n          this.playing = true;\n          this.start();\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n}\n\nexport default GameView;","import GameView from './game_view.js'\nimport SquirrelSprite from './sprites/squirrel_sprite';\nimport BranchSprite from './sprites/branch_sprite';\nimport Pause from './pause';\n\nwindow.BranchSprite = BranchSprite;\nwindow.SquirrelSprite = SquirrelSprite;\nwindow.Pause = Pause;\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const canvas = document.getElementById('game-canvas');\n  console.log(\"It's working! It's working!\");\n  const ctx = canvas.getContext('2d')\n  window.ctx = ctx;\n  const newGame = new GameView(ctx);\n  newGame.menu();\n})","class Menu {\n  constructor(ctx) {\n    this.ctx = ctx;\n    this.menuImage = document.getElementById('menu-image');\n    this.imgWidth = 1440;\n  }\n\n  draw() {\n    const scrollSpeed = .5;\n    this.ctx.drawImage(this.menuImage, this.imgWidth, 0, 1440, 720);\n    this.ctx.drawImage(this.menuImage, this.imgWidth - 1440, 0, 1440, 720);\n\n    this.imgWidth -= scrollSpeed;\n    if (this.imgWidth === 0) this.imgWidth = 1440;\n    this.ctx.fillStyle = \"white\";\n    this.ctx.textAlign = 'center';\n    this.ctx.font = \"bold 100px titlefont\";\n    this.ctx.fillText(\"Squirrel jamS\", 640, 300);\n\n    this.ctx.font = 'bold 35px titlefont';\n    this.ctx.fillText(\"press space to start & pause\", 640, 400)\n  }\n}\n\nexport default Menu;","import BranchSprite from \"./sprites/branch_sprite\";\n\nconst COLOR = 'blue';\nconst POS = {\n  0: [540, 665, 565],\n  1: [120, 245, 145],\n  2: [960, 1085, 985]}\n\n\nclass Obstacle {\n  constructor(obstacleNo, ctx) {\n    this.speed = 5;\n    this.num = obstacleNo;\n    this.color = COLOR;\n\n    this.setRandomBranch(obstacleNo);\n\n    this.sprite = new BranchSprite(ctx, this.side);\n  }\n\n  move() {\n    let position = this.pos;\n    let speed = this.speed;\n\n    this.pos = [position[0], position[1] + speed];\n  }\n\n  setRandomBranch(obstacleNo) {\n    let side;\n    let x = Math.floor(Math.random() * 3);\n    if (x === 0)  {\n      x = POS[obstacleNo][0];\n      side = 'Left';\n      this.size = [80, 30];\n    } else if (x === 1) {\n      x = POS[obstacleNo][1];\n      side = 'Right';\n      this.size = [80, 30];\n    } else {\n      x = POS[obstacleNo][2];\n      side = 'Middle';\n      this.size = [150, 30];\n    }\n\n    let size = Math.random();\n    size = size > 0.5 ? \"big\" : \"small\";\n    this.side = size + side;\n    this.pos = [x, -70];\n  }\n\n\n  draw(ctx) {\n    // this.drawHitBox(ctx);\n    this.sprite.draw(this.pos[0], this.pos[1]);\n  }\n\n  drawHitBox(ctx) {\n    ctx.beginPath();\n    ctx.rect(this.pos[0], this.pos[1], this.size[0], this.size[1]);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.strokeStyle = 'black';\n    ctx.lineWidth = 1;\n    ctx.stroke();\n  }\n}\n\nexport default Obstacle;","class Pause {\n  constructor() {\n    const pauseCanvas = document.getElementById('game-pause');\n    this.ctx = pauseCanvas.getContext('2d');\n    this.pauseImage = document.getElementById('pause-image');\n\n    this.score = 0;\n  }\n\n  draw(active) {\n    this.ctx.drawImage(this.pauseImage, 340, 100, 600, 420);\n\n    this.ctx.fillStyle = \"white\";\n    this.ctx.font = 'bold 30px titlefont';\n    this.ctx.textAlign = 'center';\n    if (active === 1) {\n      this.ctx.fillText('~ Avoid the branches! ~', 640, 130);\n      this.ctx.fillText('press d and f to move left and right', 640, 240);\n      this.ctx.fillText('move all the way to one side', 640, 300);\n      this.ctx.fillText('to jump off the tree!', 640, 360);\n\n    } else {\n      this.ctx.fillText('~ Controls ~', 640, 130);\n\n      this.ctx.fillText('Left Squirrel: a s', 640, 240);\n      this.ctx.fillText('Middle Squirrel: d f', 640, 300);\n      if (active === 3) {\n        this.ctx.fillText('Right Squirrel: j k', 640, 360);\n      }\n    }\n    this.ctx.fillText(\"press space to continue\", 640, 510);\n  }\n\n  gameOver() {\n    this.ctx.drawImage(this.pauseImage, 340, 100, 600, 420);\n    this.ctx.fillStyle = \"white\";\n    this.ctx.font = 'bold 30px titlefont';\n    this.ctx.textAlign = 'center';\n    this.ctx.fillText('you died', 640, 300);\n    this.ctx.fillText(\"press space to continue\", 640, 510);\n  }\n\n}\n\nexport default Pause;","class Sound {\n  constructor(src, sfx) {\n    this.sound = document.createElement(\"audio\");\n    this.sound.src = src;\n    this.sound.setAttribute(\"preload\", \"auto\");\n    if (!sfx) {  \n      this.sound.setAttribute(\"loop\", true);\n    }\n    this.sound.setAttribute(\"muted\", true);\n    this.sound.style.display = 'none';\n    document.body.appendChild(this.sound);\n  }\n  \n  play() {\n    this.sound.play();\n  }\n\n  playSFX() {\n    this.sound.play();\n    this.restart();\n  }\n\n  stop() {\n    this.sound.pause();\n  }\n\n  restart() {\n    this.sound.currentTime = 0;\n  }\n\n}\n\nexport default Sound;\n// 57.46","const BRANCHES = {\n  'smallLeft': [3, 3, 67, 26, 300, 120, 190, 40],\n  'smallRight': [74, 3, 66, 26, 300, 120, 10, 40],\n  'bigLeft': [3, 33, 66, 44, 300, 200, 200, 115],\n  'bigRight': [74, 33, 66, 44, 300, 200, 5, 115],\n  'smallMiddle': [3, 81, 47, 18, 220, 60, 38, 10],\n  'bigMiddle': [3, 81, 47, 18, 220, 60, 38, 10],\n}\n\nclass BranchSprite {\n  constructor(ctx, branchSize) {\n    this.ctx = ctx;\n    this.spriteSheet = document.getElementById('branches');\n    this.side = BRANCHES[branchSize];\n    this.width = BRANCHES[branchSize][4];\n    this.height = BRANCHES[branchSize][5];\n    this.cycleLoop = [];\n    this.currentLoopIndex = 0;\n  }\n\n  draw(canvasX, canvasY) {\n    const {width, height} = this;\n    this.ctx.drawImage(\n      this.spriteSheet, \n      this.side[0], this.side[1], \n      this.side[2], this.side[3], \n      canvasX - this.side[6], canvasY - this.side[7], \n      width, height);\n  }\n\n  step(canvasX, canvasY) {\n    this.draw(this.cycleLoop[this.currentLoopIndex], 1, canvasX - 30, canvasY - 5);\n    this.currentLoopIndex++;\n    if (this.currentLoopIndex >= this.cycleLoop.length) {\n      this.currentLoopIndex = 0;\n    }\n  }\n}\n\nexport default BranchSprite;","const SQUIRREL_COLUMN = [[440, 890],[0, 480],[860, 1280]]\n\nclass SquirrelSprite {\n  constructor(ctx, squirrelNo) {\n    this.ctx = ctx;\n    this.spriteSheet = document.getElementById('squirrel');\n    this.width = 100;\n    this.height = 100;\n    this.column = SQUIRREL_COLUMN[squirrelNo];\n    this.cycleLoop = [55, 81];\n    this.jumpLoop = [28, 80]\n    this.currentLoopIndex = 0;\n  }\n\n  draw(sheetX, sheetY, canvasX, canvasY) {\n    const {width, height} = this;\n\n    this.ctx.drawImage(this.spriteSheet, sheetX, sheetY, 22, 22, canvasX, canvasY, width, height);\n    // this.ctx.drawImage(this.spriteSheet, 55, 1, 22, 22, 400, 400, width, height);\n    // this.ctx.drawImage(this.spriteSheet, 81, 1, 22, 22, 500, 400, width, height);\n  }\n\n  step(canvasX, canvasY) {\n    this.draw(this.cycleLoop[this.currentLoopIndex], 1, canvasX - 30, canvasY - 5);\n    this.currentLoopIndex++;\n    if (this.currentLoopIndex >= this.cycleLoop.length) {\n      this.currentLoopIndex = 0;\n    }\n  }\n\n  jump(canvasX, canvasY, direction) {\n    let jumpPos;\n    let newX;\n    if (direction === 'left') {\n      jumpPos = 55;\n      newX = canvasX - 30;\n    } else {\n      jumpPos = 81;\n      newX = canvasX - 10;\n    }\n    this.draw(jumpPos, this.jumpLoop[this.currentLoopIndex], newX, canvasY - 5);\n    this.currentLoopIndex++;\n    if (this.currentLoopIndex >= this.cycleLoop.length) {\n      this.currentLoopIndex = 0;\n    }\n  }\n}\n\nexport default SquirrelSprite;","import SquirrelSprite from './sprites/squirrel_sprite';\n\nconst COLOR = 'orange';\nconst POS = { 0: [545, 600], 1: [125, 600], 2: [965, 600] };\nconst SIZE = [35, 60]\nconst SPEED = 10;\nconst POSITIONS = {\n  farleft: [420, 0, 840],\n  left: [545, 125, 965],\n  middle: [620, 200, 1040],\n  right: [695, 275, 1115],\n  farright: [820, 400, 1240],\n}\n\n\nclass Squirrel {\n  constructor(squirrelNo, ctx) {\n    this.active = false;\n    this.color = COLOR;\n    this.pos = POS[squirrelNo];\n    this.speed = SPEED;\n    this.moving = false;\n    this.jumping = null;\n    this.size = SIZE;\n    this.positions = {\n      farleft: POSITIONS.farleft[squirrelNo],\n      left: POSITIONS.left[squirrelNo],\n      middle: POSITIONS.middle[squirrelNo],\n      right: POSITIONS.right[squirrelNo],\n      farright: POSITIONS.farright[squirrelNo]\n    }\n    this.sprite = new SquirrelSprite(ctx, squirrelNo);\n  }\n\n  draw(ctx) {\n    // this.drawHitBox(ctx);\n    if (!this.jumping) {\n      this.sprite.step(this.pos[0], this.pos[1]);\n    } else {\n      this.sprite.jump(this.pos[0], this.pos[1], this.jumping);\n    }\n  }\n\n  drawHitBox(ctx) {\n    ctx.beginPath();\n    ctx.rect(this.pos[0], this.pos[1], this.size[0], this.size[1]);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.strokeStyle = 'black';\n    ctx.lineWidth = 1;\n    ctx.stroke();\n  }\n\n  step(direction) {\n    if (direction === 'left' && this.moving === false) {\n      this.moving = true;\n      this.leftMovement();\n    } else if (direction === 'right' && this.moving === false) {\n      this.moving = true;\n      this.rightMovement();\n    }\n  }\n\n  leftMovement() {\n    if (this.pos[0] === this.positions.left) {\n      this.jumpLeft();\n    } else {\n      this.moveLeft();\n    }\n  }\n\n  rightMovement() {\n    if (this.pos[0] === this.positions.right) {\n      this.jumpRight();\n    } else {\n      this.moveRight();\n    }\n  }\n\n  jumpLeft() {\n    this.pos[0] -= 7\n    this.jumpAnimationLeft = requestAnimationFrame(this.jumpLeft.bind(this))\n    if (this.pos[0] < this.positions.farleft) {\n      this.jumping = 'left';\n      this.pos[0] = this.positions.farleft;\n      cancelAnimationFrame(this.jumpAnimationLeft);\n      this.jumpApex(0);\n    }\n  }\n\n  moveLeft() {\n    this.pos[0] -= 7\n    this.moveAnimationLeft = requestAnimationFrame(this.moveLeft.bind(this))\n\n    if (this.pos[0] <= this.positions.left) {\n      this.pos[0] = this.positions.left;\n      this.moving = false;\n      cancelAnimationFrame(this.moveAnimationLeft);\n    }\n  }\n\n  jumpRight() {\n    this.pos[0] += 7\n    this.jumpAnimationRight = requestAnimationFrame(this.jumpRight.bind(this))\n    if (this.pos[0] > this.positions.farright) {\n      this.jumping = 'right';\n      this.pos[0] = this.positions.farright;\n      cancelAnimationFrame(this.jumpAnimationRight);\n      this.jumpApex(0);\n    }\n  }\n\n  moveRight() {\n    this.pos[0] += 7\n    this.moveAnimationRight = requestAnimationFrame(this.moveRight.bind(this))\n\n    if (this.pos[0] >= this.positions.right) {\n      this.pos[0] = this.positions.right;\n      this.moving = false;\n      cancelAnimationFrame(this.moveAnimationRight);\n    }\n  }\n\n  jumpApex(frames) {\n    if (frames < 12) {\n      frames += 1;\n      this.jumpAnimationApex = requestAnimationFrame(this.jumpApex.bind(this, frames));\n    } else {\n      cancelAnimationFrame(this.jumpAnimationApex);\n      this.jumpBack();\n    }\n\n  }\n\n  jumpBack() {\n    let distance;\n    let location;\n    if (this.pos[0] < this.positions.middle) {\n      distance = 7;\n      location = this.positions.left;\n    } else {\n      distance = -7;\n      location = this.positions.right;\n    }\n\n    this.pos[0] += distance;\n    this.jumpAnimationBack = requestAnimationFrame(this.jumpBack.bind(this))\n    if ((distance === -7 && this.pos[0] <= this.positions.right) ||\n      (distance === 7 && this.pos[0] >= this.positions.left)) {\n      this.pos[0] = location;\n      this.moving = false;\n      this.jumping = null;\n      cancelAnimationFrame(this.jumpAnimationBack);\n    }\n  }\n}\n\nexport default Squirrel;","const COLUMNS = [500, 80, 920];\n\nclass Treetrunk {\n  constructor(num) {\n    const gameLevel = document.getElementById(\"game-level\");\n    this.ctx = gameLevel.getContext(\"2d\");\n    this.treeImage = document.getElementById('tree-trunks');\n    this.imgHeight = 0;\n    this.column = COLUMNS[num];\n  }\n  \n  draw() {\n    const scrollSpeed = 5;\n    this.ctx.drawImage(this.treeImage, this.column, this.imgHeight, 280, 1000);\n    this.ctx.drawImage(this.treeImage, this.column, this.imgHeight - 1000, 280, 1000);\n    this.imgHeight += scrollSpeed;\n    if (this.imgHeight === 1000) this.imgHeight = 0;\n  }\n}\n\nexport default Treetrunk;"],"sourceRoot":""}